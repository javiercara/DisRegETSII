t.test(yA,yB,var.equal=T,conf.level = .99)
t.test(yA,yB,var.equal=T,conf.level = 0.99)
var.test(yA,yB)
qf(0.025,df1=9,df2=9)
qf(0.975,df1=9,df2=9)
2*pf(1.3441,df1=9,df2=9,lower.tail = F)
mA = scanf()
mA = scan()
rm(list=ls())
yA = c(137.5,140.7,106.9,175.1,177.3,120.4,77.9,104.2)
yB = c(103.3,121.7,98.4,161.5,167.8,67.3)
t.test(yA,yB,var.equal=T)
t.test(yA,yB,var.equal=T,conf.level = 1-alfa)
alfa = 0.01
t.test(yA,yB,var.equal=T,conf.level = 1-alfa)
t.test(yA,yB,conf.level = 1-alfa)
var.test(yA,yB,conf.level = 1-alfa)
rm(list=ls())
datos = read.table("centeno.txt",header=T)
View(datos)
rm(list=ls())
datos = read.table("centeno.txt",header=T)
View(datos)
class(datos$sem)
names(datos)
mod = aov(rend ~ sem,data=datos)
anova(mod)
model.tables(mod,type='means')
detach("package:DisRegETSII", unload=TRUE)
source("ICplot.R")
ICplot(mod,"sem")
pairwise.t.test(centeno$rend,centeno$sem,p.adj='none')
pairwise.t.test(datos$rend,datos$sem,p.adj='none')
par(mfrow=c(2,2))
plot(mod)
par(mfrow=c(1,1))
bartlett.test(datos$rend,datos$sem)
bartlett.test(datos$rend,datos$sem)
bartlett.test(datos$rend,datos$sem)
res1 = c(2.65,2.67,2.46,1.90,2.62)
res2 = c(4.31,3.96,4.64,4.74,4.00)
res3 = c(4.81,5.32,4.93,5.49,4.45)
resis = c(T1,T2,T3)
temp = c(rep(1,5),rep(2,5),rep(3,5))
temp = factor(temp)
rm(list=ls())
res1 = c(2.65,2.67,2.46,1.90,2.62)
res2 = c(4.31,3.96,4.64,4.74,4.00)
res3 = c(4.81,5.32,4.93,5.49,4.45)
resis = c(res1,res2,res3)
temp = c(rep(1,5),rep(2,5),rep(3,5))
temp = factor(temp)
mod = aov(resis ~ temp)
anova(mod)
mod = aov(resis ~ temp)
anova(mod)
# diagnosis
par(mfrow=c(2,2))
plot(mod)
par(mfrow=c(1,1))
# test de Bartlett para homocedasticidad
# H0: varianzas iguales
bartlett.test(datos$rend,datos$sem)
bartlett.test(resis,temp)
install.packages(c("backports", "curl", "DBI", "dplyr", "evaluate", "jsonlite", "R6", "Rcpp", "readr", "rmarkdown", "sparklyr", "tibble"))
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
document()
install.packages("roxygen2")
document()
document()
document()
library("DisRegETSII", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
remove.packages("DisRegETSII", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
library(DisRegETSII)
library(DisRegETSII)
descargar_datos()
library(DisRegETSII)
aov(rend ~ con*temp*cat,data=quimico)
m=aov(rend ~ con*temp*cat,data=quimico)
interIC(m,"con","temp")
library(DisRegETSII)
m=aov(rend ~ con*temp*cat,data=quimico)
interIC(m,"con","temp")
library(DisRegETSII)
interIC(m,"con","temp")
m=aov(rend ~ con*temp*cat,data=quimico)
interIC(m,"con","temp")
library(DisRegETSII)
interIC(m,"con","temp")
library(DisRegETSII)
interIC(m,"con","temp")
library(DisRegETSII)
interIC(m,"con","temp")
library(DisRegETSII)
interIC(m,"con","temp")
library(DisRegETSII)
interIC(m,"con","temp")
library(DisRegETSII)
interIC(m,"con","temp")
m1 = aov(tiempo ~ ven*ant, data = venenos)
interIC(m,"ven","ant")
interIC(m1,"ven","ant")
interIC(m1,"ant","ven")
library(DisRegETSII)
interIC(m1,"ant","ven")
interIC(m1,"ven","ant")
library(DisRegETSII)
interIC(m1,"ven","ant")
interIC(m,"con","temp")
library(DisRegETSII)
interIC(m,"con","temp")
library(DisRegETSII)
interIC(m,"con","temp")
interIC(m1,"ven","ant")
library(DisRegETSII)
interIC(m1,"ven","ant")
library(DisRegETSII)
interIC(m1,"ven","ant")
library(DisRegETSII)
interIC(m1,"ven","ant")
library(DisRegETSII)
interIC(m1,"ven","ant")
library(DisRegETSII)
interIC(m1,"ven","ant")
interIC(m,"con","temp")
interIC(m1,"ven","ant")
is.null(NULL)
library(DisRegETSII)
interIC(m1,"ven","ant")
library(DisRegETSII)
interIC(m1,"ven","ant")
library(DisRegETSII)
interIC(m1,"ven","ant")
interIC(m1,"ven","ant")
library(DisRegETSII)
interIC(m1,"ven","ant")
interIC(m1,"ven","ant",ylim=c(0,1))
library(DisRegETSII)
m1 = aov(tiempo ~ ven*ant, data = venenos)
library("DisRegETSII", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
m1 = aov(tiempo ~ ven*ant, data = venenos)
interIC(m1,"ven","ant")
interIC(m1,"ant","ven")
m1 = aov(tiempo ~ ven*ant, data = venenos)
library("DisRegETSII", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
m1 = aov(tiempo ~ ven*ant, data = venenos)
t = model.tables(m1,"mean")
t
m1
str(m1)
m1$xlevels
m1$xlevels[["ven"]]
library(DisRegETSII)
interIC(m1,"ant","ven")
interIC(m1,"ant","ven",leyenda_horiz = F)
library(DisRegETSII)
interIC(m1,"ant","ven",leyenda_horiz = F)
library(DisRegETSII)
interIC(m1,"ant","ven",leyenda_horiz = F)
interIC(m1,"ven","ant",leyenda_horiz = F)
interIC(m1,"ven","ant",leyenda_horiz = T)
interIC(m1,"ven","ant",leyenda_horiz = F)
library(DisRegETSII)
interIC(m1,"ven","ant",leyenda_horiz = F)
interIC(m1,"ven","ant",leyenda_horiz = T)
interIC(m1,"ven","ant",leyenda_horiz = F)
interIC(m1,"ant","ven",leyenda_horiz = F)
data(package="DisRegETSII")
list=data(package="DisRegETSII")
list$results
list$results[1,]
list$results[1,"Item"]
list$results[,"Item"]
library(DisRegETSII)
guardar_txt()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
document()
library(DisRegETSII)
guardar_txt()
library(DisRegETSII)
guardar_txt()
library(DisRegETSII)
guardar_txt("./datos")
venenos
"venenos"
data("venenos")
a=data("venenos")
library(DisRegETSII)
guardar_txt("../datos")
as.name("aa")
ballbearings
as.name("aa")=3
x=as.symbol("string")
x
x = 2
library(DisRegETSII)
guardar_txt("../datos")
info = data(package="DisRegETSII")
info
str(info)
data(as.name("venenos"))
data(eval(as.name("venenos")))
eval(as.name("venenos"))
library(DisRegETSII)
guardar_txt("../datos")
write.table(eval(as.name("venenos")), file = paste("venenos",".txt",sep=""))
write.table(eval(as.name("venenos")), file = paste("venenos",".txt",sep=""))
library(DisRegETSII)
guardar_txt("../datos")
library(DisRegETSII)
guardar_txt("../datos")
library(DisRegETSII)
guardar_txt("../datos")
library(DisRegETSII)
m1 = aov(tiempo ~ ven*ant, data = venenos)
interIC(m1,"ant","ven",leyenda_horiz = F)
library(DisRegETSII)
interIC(m1,"ant","ven",leyenda_horiz = F)
interIC(m1,"ven","ant",leyenda_horiz = F)
interIC(m1,"ven","ant",leyenda_horiz = T)
interIC(m1,"ven","ant",leyenda_horiz = F)
interIC(m1,"ven","ant",leyenda_horiz = T)
interIC(m1,"ven","ant",leyenda_horiz = F)
document()
document()
document()
library(DisRegETSII)
guardar_txt("../datosss")
library(DisRegETSII)
library("DisRegETSII", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
m = aov(rend ~ sem, data = centeno)
View(m)
tabla <- model.tables(modelo, type = "mean")
tabla <- model.tables(m, type = "mean")
View(tabla)
View(tabla)
tabla$table
tabla$tables
tabla$tables[["sem"]]
x = tabla$tables[["sem"]]
colnames(x)
names(x)
modelo = m
fac = "sem"
modelo = aov(rend ~ sem, data = centeno)
factor = "sem"
tabla <- model.tables(modelo, type = "mean")
source('~/githubLocal/ICplot_test.R')
source('~/githubLocal/ICplot_test.R')
source('~/githubLocal/ICplot_test.R')
# data.frame para la salida
salida = data.frame(fac = names(tabla$tables[[fac]]))
View(salida)
View(tabla)
# data.frame para la salida
salida = data.frame(fac = names(tabla$tables[[fac]]),
media = xbar, LimInf = xbar-ancho, LimSup = xbar+ancho)
salida = data.frame(fac =
names(tabla$tables[[fac]])
a=names(tabla$tables[[fac]])
a[1]
salida = data.frame(fac = names(tabla$tables[[fac]]),
media = xbar, LimInf = xbar-ancho, LimSup = xbar+ancho)
# data.frame para la salida
salida = data.frame(                    media = xbar, LimInf = xbar-ancho, LimSup = xbar+ancho)
# data.frame para la salida
salida = data.frame(                    media = xbar)
xbar <- as.vector( tabla$tables[[fac]] )
source('~/githubLocal/ICplot_test.R')
View(salida)
text(2.5)
string(2.5)
paste(alpha/2,"%")
paste(alpha/2*100,"%")
salida = data.frame(fac = names(tabla$tables[[fac]]),
media = xbar, paste(alpha/2*100,"%") = xbar-ancho, LimSup = xbar+ancho)
names(salida) = c(fac, "media", paste(alpha/2*100,"%"), paste((1-alpha/2)*100,"%"))
View(salida)
names(salida) = c(fac, "media", paste(alpha/2*100,"%",sep=""), paste((1-alpha/2)*100,"%",sep=""))
source("ICplot.R")
source("R/ICplot.R")
ICplot(modelo,"sem")
source("R/ICplot.R")
ICplot(modelo,"sem")
source("R/ICplot.R")
ICplot(modelo,"sem")
a = ICplot(modelo,"sem")
a
ICplot(modelo,"sem")
a = ICplot(modelo,"sem")
a
source("R/ICplot.R")
a = ICplot(modelo,"sem")
a
error("dd")
source("R/ICplot.R")
data(DisRegETSII::centeno)
DisRegETSII::centeno
data("DisRegETSII::centeno")
centeno=DisRegETSII::centeno
modelo = aov(rend ~ sem, data = centeno)
ICplot(modelo,"sem")
datos=DisRegETSII::fluorita
m = aov(cost ~ fluo + mez, data = datos)
ICplot(m,"fluo")
ICplot(m,"mez")
ICplot(m,"mez",valores=F)
datos=DisRegETSII::fluorita
datos
m = aov(cost ~ fluo + mez, data = datos)
anova(m)
ICplot(m,"fluo")
ICplot(m,"fluo",valores=F)
ICplot(m,"fluo")
ICplot(m,"mez")
a=ICplot(m,"mez")
round(a,2)
source("R/ICplot.R")
ICplot(m,"mez")
source("R/ICplot.R")
source("R/ICplot.R")
ICplot(m,"mez")
ICplot(m,"mez",alpha=0.1)
stop("err")
source("R/ICplot.R")
ICplot(m,mez)
ICplot(m,"mez")
typeof("meaz")
typeof("meaz") == "character"
typeof("meaz") != "character"
source("R/ICplot.R")
ICplot(m,mez)
if (typeof("mez") != "character"){ stop("La variable factor ha de ir entre comillas")}
if (typeof("mez") == "character"){ stop("La variable factor ha de ir entre comillas")}
if (typeof(mez) != "character"){ stop("La variable factor ha de ir entre comillas")}
typeof(mez)
typeof(datos$mez)
cat(mez)
paste(mez)
character(2)
as.character(2)
as.character(mez)
source('~/gihubLocal/DisRegETSII/R/ICplot.R', echo=TRUE)
ICplot(m,"mez")
View(a)
row.names(a) = NULL
a
row.names(a) = F
row.names(a) = ""
source('~/gihubLocal/DisRegETSII/R/interIC.R', echo=TRUE)
datos = DisRegETSII::venenos
m = aov(tiempo ~ ven*ant,data=venenos)
m = aov(tiempo ~ ven*ant,data=datos)
interIC(m,"ven","ant")
interIC(m,"ven","ant",leyenda_horiz = F)
source('~/gihubLocal/DisRegETSII/interIC_test.R', echo=TRUE)
source('~/gihubLocal/DisRegETSII/interIC_test.R', echo=TRUE)
xbar
ICplot(modelo,"ant")
source('~/gihubLocal/DisRegETSII/interIC_test.R', echo=TRUE)
facX
modelo$xlevels[[facX]]
modelo$xlevels[[facY]]
xbar
df = as.data.frame(xbar)
str(xbar)
mtable$ant
xbar$ant
source('~/gihubLocal/DisRegETSII/interIC_test.R', echo=TRUE)
df = as.matrix(xbar)
df
tabla
xbar
xbar[1,]
dim(xbar)
xlabel 	<-  modelo$xlevels[[facX]]
xlabel
modelo$xlevels[[facY]]
facX_v = modelo$xlevels[[facY]]
facX_text = modelo$xlevels[[facX]]
facY_text = modelo$xlevels[[facY]]
as.vector(xbar)
media = as.vector(xbar)
LimInf = media - ancho
LimSup = media + ancho
expand.grid(fax)
expand.grid(facX_text,facY_text)
m=expand.grid(facX_text,facY_text)
m
m[1,1]
facX_text
salida = data.frame(expand.grid(facX_text,facY_text),
media = round(media,2),
LimInf = round(LimInf,2),
LimSup = round(LimSup,2))
salida
names(salida) = c(facX,facY, "media", paste(alpha/2*100,"%",sep=""), paste((1-alpha/2)*100,"%",sep=""))
salida
source('~/gihubLocal/DisRegETSII/R/interIC.R', echo=TRUE)
interIC(modelo,"ven","ant")
xbar
media
facX_text = modelo$xlevels[[facX]]
facY_text = modelo$xlevels[[facY]]
nx = length(facX_text) # numero de niveles de facX
ny = length(facY_text) # numero de niveles de facY
nn = nx*ny # numero de filas del data.frame
facX1 = modelo$xlevels[[facX]]
facY1 = modelo$xlevels[[facY]]
nx = length(facX_text) # numero de niveles de facX
ny = length(facY_text) # numero de niveles de facY
nn = nx*ny # numero de filas del data.frame
# valors para el data.frame
facX2 = rep("",nn)
facY2 = rep("",nn)
media = as.vector(xbar)
LimInf = media - ancho
LimSup = media + ancho
k = 1
for (i in 1:nx){
for (j in 1:ny){
facX2[k] = facX1[i]
facY2[k] = facY2[j]
}
}
facX2
k = 1
for (i in 1:nx){
for (j in 1:ny){
facX2[k] = facX1[i]
facY2[k] = facY2[j]
k = k+1
}
}
facX2
facY2
k = 1
for (i in 1:nx){
for (j in 1:ny){
facX2[k] = facX1[i]
facY2[k] = facY1[j]
k = k+1
}
}
facX2
facY2
rep(fac1,nx)
rep(facX1,nx)
source('~/gihubLocal/DisRegETSII/R/interIC.R', echo=TRUE)
interIC(modelo,"ven","ant")
source('~/gihubLocal/DisRegETSII/R/interIC.R', echo=TRUE)
interIC(modelo,"ven","ant")
interIC(modelo,"ven","ant",alpha = 0.1)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(DisRegETSII)
m = aov(tiempo ~ ven*ant, data = venenos)
interIC(m,"ven","ant")
devtools::document()
library(DisRegETSII)
m = aov(tiempo ~ ven*ant, data = venenos)
interIC(m,"ven","ant")
ICplot(m,"ant")
m1 = aov(errores ~ sexo*form, data = ciencias)
ICplot(m1,"sexo")
interIC(m1,"sexo","form")
library(roxygen2)
document()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(DisRegETSII)
mod = aov(tiempo ~ ven*ant, data = venenos)
ICplot2(mod, "ven")
ICplot2(mod, "ant")
interIC2(mod, "ven","ant")
interIC2(mod,"ant","ven")
roxygenise()
library(DisRegETSII)
library(DisRegETSII)
mod = aov(tiempo ~ ven*ant, data = venenos)
interIC2(mod, "ven","ant")
mod = aov(cost ~ fluo + mez, data = fluorita)
ICplot2(mod,"fluo")
ICplot2(mod,"mez")
library(DisRegETSII)
mod = aov(tiempo ~ ven*ant, data = venenos)
interIC2(mod, "ven","ant")
library(ggplot2)
interIC2(mod, "ven","ant")
interIC2(mod,"ant","ven")
mod = aov(venenos$tiempo ~ venenos$ven*venenos$ant)
interIC2(mod,"venenos$ant","venenos$ven")
